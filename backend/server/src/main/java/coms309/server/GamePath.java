package coms309.server;

import java.awt.*;
import java.util.ArrayList;

public class GamePath {

    /**
     * Generates an arraylist with a specific path
     * @param xOffset The x offset
     * @param yOffset The y offset
     * @param inter Interpolation factor
     * @return
     */
    public static ArrayList<Point> getPath(int inter) {
        ArrayList<Point> path = new ArrayList<>();

        for (int i = 0; i < basePoints.length; i++) {
            path.add(new Point(basePoints[i][0], basePoints[i][1]));
        }

        while (inter-- > 0) {
            ArrayList<Point> newPath = new ArrayList<>();

            Point lastPoint = null;

            for (int i = 0; i < path.size(); i++) {
                Point currPoint = path.get(i);

                if (lastPoint != null) {
                    newPath.add(new Point((int) ((currPoint.getX() + lastPoint.getX()) / 2), (int) ((currPoint.getY() + lastPoint.getY()) / 2)));
                }

                newPath.add(currPoint);

                lastPoint = path.get(i);
            }

            path = newPath;
        }

        return path;
    }

    // Yea yea, this isn't the best way to do things
    // Get over it
    public static int[][] basePoints =
            {{856, 1073},
        {856, 1063},
        {856, 1053},
        {856, 1043},
        {856, 1033},
        {859, 1021},
        {863, 1009},
        {869, 997},
        {881, 986},
        {890, 978},
        {900, 972},
        {913, 962},
        {923, 958},
        {934, 953},
        {949, 948},
        {960, 947},
        {985, 942},
        {1005, 940},
        {1021, 934},
        {1043, 933},
        {1059, 933},
        {1076, 930},
        {1096, 928},
        {1115, 928},
        {1137, 927},
        {1161, 925},
        {1181, 924},
        {1203, 923},
        {1220, 924},
        {1236, 924},
        {1254, 923},
        {1268, 924},
        {1283, 924},
        {1303, 924},
        {1323, 922},
        {1341, 921},
        {1364, 921},
        {1386, 921},
        {1401, 923},
        {1428, 923},
        {1450, 925},
        {1472, 923},
        {1490, 923},
        {1515, 923},
        {1541, 922},
        {1557, 922},
        {1575, 923},
        {1593, 923},
        {1613, 920},
        {1629, 915},
        {1643, 910},
        {1655, 904},
        {1664, 898},
        {1672, 889},
        {1680, 877},
        {1686, 864},
        {1692, 855},
        {1695, 845},
        {1700, 831},
        {1703, 814},
        {1706, 799},
        {1706, 783},
        {1706, 774},
        {1706, 760},
        {1706, 745},
        {1706, 727},
        {1703, 716},
        {1701, 698},
        {1696, 681},
        {1689, 667},
        {1684, 654},
        {1678, 636},
        {1661, 619},
        {1645, 607},
        {1632, 599},
        {1621, 586},
        {1606, 575},
        {1589, 569},
        {1575, 563},
        {1559, 557},
        {1530, 548},
        {1516, 545},
        {1504, 539},
        {1482, 536},
        {1465, 531},
        {1437, 527},
        {1422, 522},
        {1400, 521},
        {1383, 516},
        {1362, 515},
        {1341, 513},
        {1325, 513},
        {1298, 516},
        {1281, 519},
        {1261, 530},
        {1247, 539},
        {1242, 545},
        {1232, 560},
        {1224, 577},
        {1222, 589},
        {1214, 605},
        {1202, 625},
        {1200, 642},
        {1193, 660},
        {1189, 677},
        {1180, 692},
        {1174, 705},
        {1167, 717},
        {1156, 730},
        {1144, 742},
        {1139, 752},
        {1129, 760},
        {1112, 766},
        {1097, 771},
        {1079, 777},
        {1061, 783},
        {1044, 786},
        {1024, 786},
        {1009, 786},
        {986, 789},
        {953, 789},
        {932, 789},
        {910, 789},
        {885, 787},
        {867, 786},
        {850, 783},
        {829, 783},
        {803, 786},
        {787, 774},
        {768, 765},
        {756, 757},
        {744, 751},
        {727, 748},
        {716, 736},
        {708, 724},
        {694, 708},
        {684, 699},
        {676, 687},
        {666, 680},
        {659, 666},
        {650, 652},
        {646, 637},
        {641, 625},
        {641, 611},
        {641, 595},
        {638, 578},
        {639, 558},
        {642, 542},
        {645, 527},
        {652, 502},
        {661, 489},
        {669, 472},
        {675, 460},
        {686, 443},
        {694, 425},
        {700, 413},
        {708, 399},
        {716, 387},
        {723, 380},
        {732, 366},
        {740, 355},
        {752, 343},
        {760, 336},
        {769, 325},
        {778, 314},
        {786, 305},
        {796, 293},
        {807, 287},
        {818, 274},
        {829, 264},
        {840, 252},
        {852, 242},
        {861, 231},
        {870, 218},
        {882, 205},
        {894, 196},
        {904, 187},
        {917, 178},
        {930, 171},
        {941, 164},
        {951, 158},
        {963, 152},
        {984, 145},
        {998, 145},
        {1013, 143},
        {1034, 136},
        {1055, 131},
        {1072, 133},
        {1093, 134},
        {1112, 137},
        {1136, 137},
        {1154, 145},
        {1187, 152},
        {1207, 156},
        {1231, 161},
        {1251, 166},
        {1283, 171},
        {1303, 175},
        {1327, 181},
        {1351, 183},
        {1377, 190},
        {1394, 193},
        {1414, 199},
        {1428, 202},
        {1443, 206},
        {1458, 209},
        {1479, 210},
        {1504, 209},
        {1519, 208},
        {1534, 205},
        {1552, 205},
        {1571, 205},
        {1590, 199},
        {1602, 192},
        {1617, 184},
        {1628, 173},
        {1631, 163},
        {1637, 152},
        {1643, 140},
        {1647, 127},
        {1655, 117},
        {1655, 108},
        {1657, 93},
        {1662, 78},
        {1662, 67},
        {1663, 53},
        {1659, 40},
        {1659, 25},
        {1659, 10},
        {1657, 2},
        {1657, -10},
        {1657, -20},
        {1657, -30},
        {1657, -40},
        {1657, -50}};

}
